// SPDX-License-Identifier: UNLICENSED
pragma solidity >=0.7.0 <0.8.0;

contract MarksManagmtSys {
    struct Student {
        int ID;
        string fName;
        string lName;
        int marks;
    }

    address owner;
    int public stdCount = 0;
    mapping(int => Student) public stdRecords;

    // Modifier to allow only the owner to execute certain functions
    modifier onlyOwner {
        require(owner == msg.sender, "Only owner can execute this");
        _;
    }

    // Constructor to set the contract owner
    constructor() {
        owner = msg.sender;
    }

    // Function to add new student records, only accessible by the owner
    function addNewRecords(int _ID, string memory _fName, string memory _lName, int _marks) public onlyOwner {
        stdCount = stdCount + 1;
        stdRecords[stdCount] = Student(_ID, _fName, _lName, _marks);
    }

    // Function to add bonus marks to the latest student record, only accessible by the owner
    function bonusMarks(int _bonus) public onlyOwner {
        require(stdCount > 0, "No students to give bonus marks to");
        stdRecords[stdCount].marks = stdRecords[stdCount].marks + _bonus;
    }
}


//Compile, Change version and Deploy the code
